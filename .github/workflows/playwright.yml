name: "Playwright CI/CD Pipeline"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test-playwright:
    name: Run Playwright Tests
    runs-on: ubuntu-latest

    permissions:
      contents: read
      actions: write

    env:
      ACTIONS_STEP_DEBUG: true
      API_URL: http://127.0.0.1:8001

    steps:
      # 1. Repository auschecken
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Docker-Version überprüfen
      - name: Check Docker Version
        run: docker --version

      # 3. Setup Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 4. Build API Docker Image
      - name: Build API Docker Image
        run: |
          docker build -t api-server ./PycharmProjects/PythonProject

      # 5. Build Testdatengenerator Docker Image
      - name: Build Testdatengenerator Image
        run: |
          docker build -t testdatengenerator-image ./path/to/testdatengenerator

      # 6. Start API Server
      - name: Start API Server
        run: |
          docker run -d -p 8001:8001 --name api-server api-server

      # 7. Start Testdatengenerator
      - name: Start Testdatengenerator
        run: |
          docker run -d -p 8501:8501 --name testdatengenerator testdatengenerator-image

      # 8. Warten, bis die API verfügbar ist
      - name: Wait for API
        run: |
          for i in {1..10}; do
            curl -s http://localhost:8001 && break || sleep 5;
          done

      # 9. Warten, bis der Testdatengenerator verfügbar ist
      - name: Wait for Testdatengenerator
        run: |
          for i in {1..10}; do
            curl -s http://localhost:8501 && break || sleep 5;
          done

      # 10. Docker-Logs bei Fehlern anzeigen
      - name: Print API Server Logs
        if: failure()
        run: docker logs api-server

      - name: Print Testdatengenerator Logs
        if: failure()
        run: docker logs testdatengenerator

      # 11. Node.js einrichten
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      # 12. Abhängigkeiten installieren
      - name: Install dependencies
        run: npm ci

      # 13. Playwright installieren
      - name: Install Playwright
        run: npx playwright install --with-deps

      # 14. Tests ausführen
      - name: Run Playwright Tests
        run: |
          mkdir -p test-results
          xvfb-run --auto-servernum -- npx playwright test --output test-results

      # 15. Allure-Bericht generieren
      - name: Generate Allure Report
        if: always()
        run: |
          npx allure generate allure-results -o allure-report

      # 16. Allure-Bericht hochladen
      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Allure Report
          path: allure-report

      # 17. Testergebnisse hochladen
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Test Results
          path: test-results

      # 18. Stop and Remove Docker Container
      - name: Stop and Remove API Server
        run: |
          docker stop api-server
          docker rm api-server

      - name: Stop and Remove Testdatengenerator
        run: |
          docker stop testdatengenerator
          docker rm testdatengenerator