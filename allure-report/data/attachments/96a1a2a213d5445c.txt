# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Daten generieren und exportieren (API)
- Location: C:\Users\azebaze\Playwright-Kurs\testdaten_generator\GenUndExport_API.spec.ts:6:5

# Error details

```
Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8000
Call log:
  - → GET http://localhost:8000/generate/registrierung/5
    - user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Safari/537.36
    - accept: */*
    - accept-encoding: gzip,deflate,br

    at DataAPI.generateData (C:\Users\azebaze\Playwright-Kurs\utils\DataApi.ts:14:45)
    at C:\Users\azebaze\Playwright-Kurs\testdaten_generator\GenUndExport_API.spec.ts:12:34
```

# Test source

```ts
   1 | export class DataAPI {
   2 |     private request: any;
   3 |     private baseUrl: string;
   4 |
   5 |     constructor(request: any, baseUrl: string) {
   6 |         this.request = request;
   7 |         this.baseUrl = baseUrl;
   8 |     }
   9 |
  10 |     async generateData(dataType: string, numRecords: number) {
  11 |         const endpoint = `generate/${dataType}/${numRecords}`;
  12 |         console.log(`📡 API-Request an: ${this.baseUrl}/${endpoint}`);
  13 |
> 14 |         const response = await this.request.get(`${this.baseUrl}/${endpoint}`, { timeout: 30000 });
     |                                             ^ Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8000
  15 |         const responseBody = await response.text(); // Debugging
  16 |
  17 |         console.log(`🔄 Statuscode: ${response.status()}`);
  18 |         console.log(`📩 Antwort: ${responseBody}`);
  19 |
  20 |         if (!response.ok()) {
  21 |             throw new Error(`Fehler beim Generieren: ${endpoint}`);
  22 |         }
  23 |         return JSON.parse(responseBody);
  24 |     }
  25 |
  26 |     async exportData(format: string) {
  27 |         const url = `${this.baseUrl}/export_data/${format}`;
  28 |         console.log(`📡 Export-Request an: ${url}`);
  29 |     
  30 |         let attempt = 0;
  31 |         const maxRetries = 3;
  32 |     
  33 |         while (attempt < maxRetries) {
  34 |             try {
  35 |                 const response = await this.request.get(url, { timeout: 60000 });
  36 |                 const responseBody = await response.text();
  37 |     
  38 |                 if (!response.ok()) {
  39 |                     throw new Error(`Fehler beim Export als ${format}: ${response.status()} - ${responseBody}`);
  40 |                 }
  41 |     
  42 |                 return responseBody;  // Erfolgreiche Antwort zurückgeben
  43 |             } catch (error) {
  44 |                 console.error(`❌ Fehler beim Exportieren von Daten als ${format} (Versuch ${attempt + 1}):`, error.message);
  45 |                 if (error.message.includes("ECONNRESET")) {
  46 |                     console.log("Verbindung zurückgesetzt. Versuche es erneut...");
  47 |                     attempt++;
  48 |                     if (attempt >= maxRetries) {
  49 |                         console.error("Maximale Anzahl von Versuchen erreicht. Export fehlgeschlagen.");
  50 |                         throw error;  // Gebe den Fehler weiter, wenn die maximalen Versuche erreicht wurden
  51 |                     }
  52 |                 } else {
  53 |                     throw error;  // Bei anderen Fehlern den Fehler sofort weiterwerfen
  54 |                 }
  55 |             }
  56 |         }
  57 |     }
  58 |     
  59 | }
  60 |
```