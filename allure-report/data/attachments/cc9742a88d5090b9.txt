# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Daten f√ºr CoffeeShop generieren und exportieren
- Location: C:\Users\azebaze\Playwright-Kurs\testdaten_generator\DatenGenerieren.spec.ts:5:5

# Error details

```
Error: Option 'json' sollte sichtbar sein

expect(locator).toBeVisible()

Locator: locator('div:has-text("json")').first()
Expected: visible
Received: hidden
Call log:
  - Option 'json' sollte sichtbar sein with timeout 5000ms
  - waiting for locator('div:has-text("json")').first()
    8 √ó locator resolved to <div id="root">‚Ä¶</div>
      - unexpected value "hidden"

    at ExportPage.exportiereUndLadeFormate (C:\Users\azebaze\Playwright-Kurs\Pages\API_Test.page.ts:80:77)
    at C:\Users\azebaze\Playwright-Kurs\testdaten_generator\DatenGenerieren.spec.ts:32:5
```

# Page snapshot

```yaml
- banner:
  - button "Deploy"
  - button
- heading "Testdaten-Generator" [level=1]
- text: profil
- combobox "Selected profil. Datentyp w√§hlen"
- img "open"
- spinbutton "Anzahl der Datens√§tze": "5"
- button
- button
- button "üõ†Ô∏è G√ºltige Daten generieren":
  - paragraph: üõ†Ô∏è G√ºltige Daten generieren
- alert:
  - paragraph: 5 g√ºltige Datens√§tze generiert!
- button "Download as CSV"
- button "Search"
- button "Fullscreen"
- button "‚ùå Ung√ºltige Daten generieren":
  - paragraph: ‚ùå Ung√ºltige Daten generieren
- heading "üì§ Daten exportieren" [level=3]
- text: json
- combobox "Selected json. Exportformat" [expanded]
- img "open"
- button "üíæ Exportieren":
  - paragraph: üíæ Exportieren
- paragraph:
  - text: API gestartet auf
  - link "http://localhost:8001"
- list:
  - option "json" [selected]
  - option "csv"
  - option "xlsx"
  - option "xml"
```

# Test source

```ts
   1 | import { Page, expect } from '@playwright/test';
   2 |
   3 | export class ExportPage {
   4 |     readonly page: Page;
   5 |     readonly dropdown;
   6 |     readonly exportFormat;
   7 |     readonly generateButton;
   8 |     readonly exportButton;
   9 |
   10 |     constructor(page: Page) {
   11 |         this.page = page;
   12 |         this.dropdown = page.getByRole('combobox', { name: /Datentyp w√§hlen/i });
   13 |         this.exportFormat = page.getByRole('combobox', { name: /Exportformat ausw√§hlen/i });
   14 |         this.generateButton = page.getByRole('button', { name: /Daten generieren/i });
   15 |         this.exportButton = page.getByRole('button', { name: /Daten exportieren/i });
   16 |     }
   17 |
   18 |     async goto(url: string) {
   19 |         await this.page.goto(url);
   20 |         console.log("üìå Seite geladen");
   21 |         await this.page.waitForTimeout(2000);
   22 |     }
   23 |
   24 |     async verifyTitle(expectedTitle: string) {
   25 |         await expect(this.page).toHaveTitle(expectedTitle);
   26 |         console.log(`‚úÖ Seitentitel gepr√ºft: ${expectedTitle}`);
   27 |         await this.page.waitForTimeout(2000);
   28 |     }
   29 |
   30 |     async selectDataType(dataType: string) {
   31 |         await this.dropdown.click();
   32 |         await this.page.locator(`text=${dataType}`).first().click();
   33 |         await expect(this.dropdown).toHaveAttribute('aria-label', new RegExp(`Selected ${dataType}`, 'i'));
   34 |         console.log(`‚úÖ '${dataType}' als Datentyp ausgew√§hlt`);
   35 |         await this.page.waitForTimeout(2000);
   36 |     }
   37 |
   38 |     async enterDataCount(count: number) {
   39 |         await this.page.fill('input[type="number"]', count.toString());
   40 |         console.log(`üìå ${count} Datens√§tze eingegeben`);
   41 |         await this.page.waitForTimeout(2000);
   42 |     }
   43 |
   44 |     async generateData(count: number) {
   45 |         // Dynamischer Text, der die Anzahl der generierten Datens√§tze enth√§lt
   46 |         const confirmationText = `${count} g√ºltige Datens√§tze generiert!`;
   47 |     
   48 |         // Warten auf den Button zum Generieren der Daten und sicherstellen, dass er sichtbar ist
   49 |         const generateButtonLocator = this.page.locator('#root > div:nth-child(1) > div.withScreencast > div > div > section > div.stMainBlockContainer.block-container.st-emotion-cache-mtjnbi.eht7o1d4 > div > div > div > div:nth-child(4) > div > button > div');
   50 |         await expect(generateButtonLocator).toBeVisible({ timeout: 5000 });
   51 |     
   52 |         // Klick auf den Button, um die Daten zu generieren
   53 |         await generateButtonLocator.click();
   54 |     
   55 |         // Best√§tigungsnachricht erwarten
   56 |         const confirmationLocator = this.page.locator(`#root > div:nth-child(1) > div.withScreencast > div > div > section > div.stMainBlockContainer.block-container.st-emotion-cache-mtjnbi.eht7o1d4 > div > div > div > div:nth-child(5) > div > div > div > div > div > div:has-text("${confirmationText}")`);
   57 |         await expect(confirmationLocator).toBeVisible({ timeout: 10000 });
   58 |     
   59 |         // Konsolen-Log zur Best√§tigung der Generierung
   60 |         console.log(`‚úÖ ${confirmationText} erfolgreich generiert`);
   61 |     
   62 |         // Optional: Warte etwas, um sicherzustellen, dass die Best√§tigung vollst√§ndig sichtbar ist
   63 |         await this.page.waitForTimeout(2000);
   64 |     }
   65 |     
   66 |     
   67 |
   68 |     async exportiereUndLadeFormate(formate: string[]) {
   69 |         for (const format of formate) {
   70 |             console.log(`üìå W√§hle Format '${format}' aus`);
   71 |     
   72 |             // 1. Dropdown √∂ffnen
   73 |             const comboBox = this.page.getByRole('combobox', { name: /Exportformat/i });
   74 |             await comboBox.click();
   75 |             await expect(comboBox).toBeVisible({ timeout: 5000 }); // Sicherstellen, dass das Dropdown sichtbar ist
   76 |             await this.page.waitForTimeout(500); // Kleine Pause, falls Animation
   77 |     
   78 |             // 2. Option im Dropdown suchen und klicken
   79 |             const option = this.page.locator(`div:has-text("${format}")`).first();
>  80 |             await expect(option, `Option '${format}' sollte sichtbar sein`).toBeVisible({ timeout: 5000 });
      |                                                                             ^ Error: Option 'json' sollte sichtbar sein
   81 |             await option.click();
   82 |             console.log(`üìå Format '${format}' ausgew√§hlt`);
   83 |     
   84 |             // 3. Exportieren-Button suchen und klicken
   85 |             const exportButton = this.page.locator('button:has-text("üíæ Exportieren")').first();
   86 |             await expect(exportButton, 'Exportieren-Button sollte sichtbar sein').toBeVisible({ timeout: 5000 });
   87 |             await exportButton.click();
   88 |             console.log(`‚¨áÔ∏è Exportvorgang f√ºr '${format}' gestartet`);
   89 |     
   90 |             // 4. Auf den passenden Download-Button warten und klicken
   91 |             const downloadButton = this.page.getByRole('button', {
   92 |                 name: new RegExp(`Download ${format}\\s*\\(g√ºltig\\)`, 'i'),
   93 |             });
   94 |     
   95 |             const [download] = await Promise.all([
   96 |                 this.page.waitForEvent('download'),
   97 |                 downloadButton.first().click(),
   98 |             ]);
   99 |     
  100 |             const filename = await download.suggestedFilename();
  101 |             await download.saveAs(`downloads/${filename}`);
  102 |             console.log(`‚úÖ Datei im Format '${format}' heruntergeladen: ${filename}`);
  103 |         }
  104 |     }
  105 |     
  106 |     
  107 |
  108 |    /* async exportiereUndLadeFormate(formate: string[]) {
  109 |         for (const format of formate) {
  110 |             // Export-Dropdown √∂ffnen
  111 |             const exportDropdown = this.page.locator('[role="combobox"][aria-label*="Exportformat"]');
  112 |             await expect(exportDropdown, 'Export-Dropdown sollte sichtbar sein').toBeVisible({ timeout: 10000 });
  113 |             await exportDropdown.click();
  114 |             console.log(`üìÇ Dropdown f√ºr Exportformate ge√∂ffnet`);
  115 |     
  116 |             // Option aus Dropdown w√§hlen (Format ausw√§hlen)
  117 |             const option = this.page.locator(`div.st-bn:has-text('${format}')`).first(); // Sucht nach der Format-Option
  118 |             await expect(option, `Option '${format}' sollte sichtbar sein`).toBeVisible({ timeout: 5000 });
  119 |             await option.click();
  120 |             console.log(`üìå Format '${format}' ausgew√§hlt`);
  121 |     
  122 |             // Exportieren-Button klicken
  123 |             const exportButton = this.page.locator('button:has-text("üíæ Exportieren")');
  124 |             await expect(exportButton, 'Exportieren-Button sollte sichtbar sein').toBeVisible({ timeout: 5000 });
  125 |             await exportButton.click();
  126 |             console.log(`‚¨áÔ∏è Exportvorgang f√ºr '${format}' gestartet`);
  127 |     
  128 |             // Download-Button abh√§ngig vom Format suchen
  129 |             const downloadButton = this.page.getByRole('button', {
  130 |                 name: new RegExp(`Download ${format.toUpperCase()} \\(g√ºltig\\)`, 'i'),
  131 |             });
  132 |
  133 |             const [download] = await Promise.all([
  134 |                 this.page.waitForEvent('download'),
  135 |                 downloadButton.first().click(),
  136 |             ]);
  137 |     
  138 |             // Datei speichern
  139 |             const filename = await download.suggestedFilename();
  140 |             await download.saveAs(`downloads/${filename}`);
  141 |             console.log(`‚úÖ Datei im Format '${format}' heruntergeladen: ${filename}`);
  142 |         }
  143 |     } */
  144 |     
  145 |     
  146 |     
  147 |     
  148 | }
  149 |
```