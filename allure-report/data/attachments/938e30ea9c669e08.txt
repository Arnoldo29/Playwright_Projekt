# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Daten für CoffeeShop-Webseite verwenden
- Location: C:\Users\azebaze\Playwright-Kurs\testdaten_generator\API_Testdaten.spec.ts:7:5

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toBeVisible()

Locator: locator('#logout-button')
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 5000ms
  - waiting for locator('#logout-button')
    - waiting for" http://10.40.226.38/Bootcamp_Bench/index.php" navigation to finish...
    - navigated to "http://10.40.226.38/Bootcamp_Bench/index.php"

    at C:\Users\azebaze\Playwright-Kurs\testdaten_generator\API_Testdaten.spec.ts:178:50
```

# Page snapshot

```yaml
- banner:
  - link:
    - img
  - link "0":
    - img
    - text: "0"
  - table:
    - rowgroup:
      - row "tomas22":
        - cell "tomas22"
      - row "Profil | Logout":
        - cell "Profil | Logout":
          - link "Profil"
          - text: "|"
          - link "Logout"
  - navigation:
    - link "Home"
    - link "About"
    - link "Shop"
    - link "Contact"
- heading "Feinster Kaffee" [level=1]
- paragraph: In unserem kleinen Webshop bieten wir die tollsten Kaffeespezialitäten
- link "Auf zum Kaffee"
- img
- text: "Gerade in der kalten Jahreszeit: Kaffee, Chai, heiße Schokolade ❮ ❯"
- contentinfo:
  - text: ˄
  - link "AGB"
  - paragraph: Finetest Coffee c/o Coffeeshop Inc.
  - paragraph: Teststraße 123
  - paragraph: 12345 Testingen
  - paragraph:
    - link "finetest@coffee.inc"
  - paragraph: Version_2.0.1 / Alle Features ohne Fehler
```

# Test source

```ts
   78 |
   79 |         // Warten, bis das Passwortfeld sichtbar und interaktiv ist
   80 |         await page.waitForSelector('#register-pw', { state: 'visible', timeout: 10000 });
   81 |         if (!(await page.locator('#register-pw').isEnabled())) {
   82 |             throw new Error("🚨 Fehler: Passwortfeld ist nicht aktiviert.");
   83 |         }
   84 |
   85 |         // Prüfen, ob das Feld nicht disabled ist
   86 |         await page.waitForFunction(() => {
   87 |             const input = document.querySelector('#register-pw') as HTMLInputElement;
   88 |             return input && !input.disabled;
   89 |         });
   90 |
   91 |         // Prüfen, ob das Feld nicht disabled ist
   92 |         await page.waitForFunction(() => {
   93 |             const input = document.querySelector('#register-pwrep') as HTMLInputElement;
   94 |             return input && !input.disabled;
   95 |         });
   96 |
   97 |         // Debugging: Überprüfen Sie den Zustand des Passwortfelds
   98 |         const isVisible = await page.locator('#register-pw').isVisible();
   99 |         const isEnabled = await page.locator('#register-pw').isEnabled();
  100 |         console.log(`🔍 Passwortfeld sichtbar: ${isVisible}`);
  101 |         console.log(`🔍 Passwortfeld aktiviert: ${isEnabled}`);
  102 |
  103 |         // Scrollen Sie zum Passwortfeld
  104 |         await page.locator('#register-pw').scrollIntoViewIfNeeded();
  105 |
  106 |         // Registrierungsformular ausfüllen
  107 |         await page.type('#register-username', username, { delay: 50 });
  108 |         await page.type('#register-pw', password, { delay: 50 });
  109 |         await page.type('#register-pwrep', passwordRepeat, { delay: 50 });
  110 |         console.log("✅ Registrierungsformular ausgefüllt");
  111 |
  112 |         // Prüfen, ob die eingegebenen Daten gültig sind
  113 |         const usernameMessage = await page.locator('#usrmsg').textContent();
  114 |         const userError = await page.locator('#repwmsg').textContent();
  115 |         const passwordError = await page.locator('#pwmsg').textContent();
  116 |
  117 |         if (
  118 |             usernameMessage?.includes("Dieser Name ist verfügbar") &&
  119 |             (!userError || !userError.includes("Die Passwörter stimmen nicht überein")) &&
  120 |             (!passwordError || !passwordError.includes("8-20 Zeichen: a-z, A-Z, 0-9, @$!%*?"))
  121 |         ) {
  122 |             console.log("✅ Gültige Testdaten gefunden, Registrierung wird fortgesetzt.");
  123 |             validUser = randomUser;
  124 |             break;
  125 |         } else {
  126 |             console.log(`⚠️ Ungültige Daten: ${usernameMessage || ''} ${userError || ''} ${passwordError || ''}`);
  127 |             validUsers.splice(randomIndex, 1); // Entferne ungültige Daten
  128 |             continue;
  129 |         }
  130 |     }
  131 |
  132 |     if (!validUser) {
  133 |         throw new Error("❌ Keine gültigen Testdaten gefunden.");
  134 |     }
  135 |
  136 |     // AGB-Checkbox aktivieren
  137 |     await page.check('#register-check');
  138 |     console.log("✅ AGB akzeptiert");
  139 |
  140 |     // Registrierung abschicken
  141 |     await page.click('body > content > div:nth-child(2) > div > form > div.reg.btn > input');
  142 |     console.log("✅ Registrierung abgeschickt");
  143 |
  144 |     // Prüfen, ob die Erfolgsmeldung angezeigt wird
  145 |     const successMessage = await page.locator('#overlaysubmit > h2').filter({ hasText: "Deine Registrierung war erfolgreich!" });
  146 |     const confirmButton = page.locator('#overlaysubmit > button').filter({ hasText: "OK" });
  147 |
  148 |     if (await successMessage.isVisible()) {
  149 |         console.log("✅ Erfolgsmeldung erhalten: 'Deine Registrierung war erfolgreich!'");
  150 |
  151 |         // Warten, bis der OK-Button sichtbar ist und dann klicken
  152 |         await confirmButton.isVisible();
  153 |         await confirmButton.click();
  154 |
  155 |         console.log("✅ OK-Button geklickt");
  156 |     } else {
  157 |         console.log(`⚠️ Keine gültige Erfolgsmeldung gefunden. Erhalten: '${successMessage || "Keine Nachricht"}'`);
  158 |     }
  159 |
  160 |     // Zurück zur Hauptseite
  161 |     await page.goto(COFFEESHOP_URL);
  162 |     console.log("📌 Zurück zur Hauptseite");
  163 |
  164 |     // Erneut auf Login klicken
  165 |     await page.click('#accountbar > a');
  166 |     console.log("✅ Auf Login geklickt");
  167 |
  168 |     // Login-Felder ausfüllen
  169 |     await page.type('#login-username', validUser.benutzername, { delay: 200 });
  170 |     await page.type('#login-password', validUser.passwort, { delay: 200 });
  171 |     console.log("✅ Login-Formular ausgefüllt");
  172 |
  173 |     // Login absenden
  174 |     await page.click('#login-submit');
  175 |     console.log("✅ Login abgeschickt");
  176 |
  177 |     // Überprüfen, ob der Login erfolgreich war (Logout-Button sichtbar)
> 178 |     await expect(page.locator('#logout-button')).toBeVisible();
      |                                                  ^ Error: Timed out 5000ms waiting for expect(locator).toBeVisible()
  179 |     console.log("🎉 Erfolgreich eingeloggt!");
  180 | });
  181 |
```