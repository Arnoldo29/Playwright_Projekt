# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Daten für CoffeeShop generieren und exportieren
- Location: C:\Users\azebaze\Playwright-Kurs\testdaten_generator\DatenGenerieren.spec.ts:5:5

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toBeVisible()

Locator: locator('//*[@id="root"]/div[1]/div[1]/div/div/section/div[1]/div/div/div/div[7]/div/div/div/div[2]/svg')
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 5000ms
  - waiting for locator('//*[@id="root"]/div[1]/div[1]/div/div/section/div[1]/div/div/div/div[7]/div/div/div/div[2]/svg')

    at ExportPage.exportData (C:\Users\azebaze\Playwright-Kurs\Pages\API_Test.page.ts:83:48)
    at C:\Users\azebaze\Playwright-Kurs\testdaten_generator\DatenGenerieren.spec.ts:32:26
```

# Page snapshot

```yaml
- banner:
  - button "Deploy"
  - button
- heading "Testdaten-Generator" [level=1]
- text: profil
- combobox "Selected profil. Datentyp wählen"
- img "open"
- spinbutton "Anzahl der Datensätze": "5"
- button
- button
- button "🛠️ Gültige Daten generieren":
  - paragraph: 🛠️ Gültige Daten generieren
- button "❌ Ungültige Daten generieren":
  - paragraph: ❌ Ungültige Daten generieren
- heading "📤 Daten exportieren" [level=3]
- text: json
- combobox "Selected json. Exportformat"
- img "open"
- button "💾 Exportieren":
  - paragraph: 💾 Exportieren
- paragraph:
  - text: API gestartet auf
  - link "http://localhost:8001"
```

# Test source

```ts
   1 | import { Page, expect } from '@playwright/test';
   2 |
   3 | export class ExportPage {
   4 |     readonly page: Page;
   5 |     readonly dropdown;
   6 |     readonly exportFormat;
   7 |     readonly generateButton;
   8 |     readonly exportButton;
   9 |
   10 |     constructor(page: Page) {
   11 |         this.page = page;
   12 |         this.dropdown = page.getByRole('combobox', { name: /Datentyp wählen/i });
   13 |         this.exportFormat = page.getByRole('combobox', { name: /Exportformat auswählen/i });
   14 |         this.generateButton = page.getByRole('button', { name: /Daten generieren/i });
   15 |         this.exportButton = page.getByRole('button', { name: /Daten exportieren/i });
   16 |     }
   17 |
   18 |     async goto(url: string) {
   19 |         await this.page.goto(url);
   20 |         console.log("📌 Seite geladen");
   21 |         await this.page.waitForTimeout(2000);
   22 |     }
   23 |
   24 |     async verifyTitle(expectedTitle: string) {
   25 |         await expect(this.page).toHaveTitle(expectedTitle);
   26 |         console.log(`✅ Seitentitel geprüft: ${expectedTitle}`);
   27 |         await this.page.waitForTimeout(2000);
   28 |     }
   29 |
   30 |     async selectDataType(dataType: string) {
   31 |         await this.dropdown.click();
   32 |         await this.page.locator(`text=${dataType}`).first().click();
   33 |         await expect(this.dropdown).toHaveAttribute('aria-label', new RegExp(`Selected ${dataType}`, 'i'));
   34 |         console.log(`✅ '${dataType}' als Datentyp ausgewählt`);
   35 |         await this.page.waitForTimeout(2000);
   36 |     }
   37 |
   38 |     async enterDataCount(count: number) {
   39 |         await this.page.fill('input[type="number"]', count.toString());
   40 |         console.log(`📌 ${count} Datensätze eingegeben`);
   41 |         await this.page.waitForTimeout(2000);
   42 |     }
   43 |
   44 |     async generateData(count: number) {
   45 |         // Der Button, der die Daten generiert
   46 |         const buttonSelector =
   47 |             '#root > div:nth-child(1) > div.withScreencast > div > div > section > div.stMainBlockContainer.block-container.st-emotion-cache-mtjnbi.eht7o1d4 > div > div > div > div:nth-child(4) > div > button > div > p';
   48 |     
   49 |         // Dynamischer Bestätigungstext, je nachdem, wie viele Datensätze generiert werden
   50 |         const confirmationText = `${count} gültige Datensätze generiert!`;
   51 |     
   52 |         // Sicherstellen, dass count nicht undefined ist
   53 |         if (!count) {
   54 |             console.error("Fehler: Anzahl der zu generierenden Datensätze ist nicht definiert.");
   55 |             return;
   56 |         }
   57 |     
   58 |         // Button-Selektor
   59 |         const button = this.page.locator(buttonSelector);
   60 |         await expect(button).toBeVisible({ timeout: 5000 });
   61 |         await button.click();
   62 |     
   63 |         // Bestätigung, dass die richtigen Datensätze generiert wurden
   64 |         const confirmationSelector =
   65 |             '#root > div:nth-child(1) > div.withScreencast > div > div > section > div.stMainBlockContainer.block-container.st-emotion-cache-mtjnbi.eht7o1d4 > div > div > div > div:nth-child(5) > div > div > div > div > div > div > p';
   66 |         
   67 |         const confirmation = this.page.locator(confirmationSelector);
   68 |         await expect(confirmation).toHaveText(confirmationText, { timeout: 10000 });
   69 |     
   70 |         console.log(`✅ ${count} Datensätze erfolgreich generiert`);
   71 |         await this.page.waitForTimeout(1000);
   72 |     }
   73 |     
   74 |     
   75 |
   76 |     async exportData(format: string, fileExtension: string) {
   77 |         
   78 |     
   79 |         // Schritt 2: Klicke auf das SVG der Combobox (Dropdown öffnen)
   80 |         const exportFormatDropdownIcon = this.page.locator(
   81 |             'xpath=//*[@id="root"]/div[1]/div[1]/div/div/section/div[1]/div/div/div/div[7]/div/div/div/div[2]/svg'
   82 |         );
>  83 |         await expect(exportFormatDropdownIcon).toBeVisible({ timeout: 5000 });
      |                                                ^ Error: Timed out 5000ms waiting for expect(locator).toBeVisible()
   84 |         await exportFormatDropdownIcon.click();
   85 |         console.log(`📌 Dropdown für Exportformat geöffnet`);
   86 |     
   87 |         // Schritt 3: Wähle das gewünschte Format aus der Liste
   88 |         const formatOption = this.page.locator(`text=${format}`);
   89 |         await expect(formatOption).toBeVisible({ timeout: 5000 });
   90 |         await formatOption.click();
   91 |         console.log(`✅ '${format}' als Exportformat ausgewählt`);
   92 |     
   93 |         // Schritt 4: Download-Button (z. B. "📥 Download JSON") klicken
   94 |         const downloadButton = this.page.locator(`button:has-text("📥 Download ${format.toUpperCase()}")`);
   95 |         await expect(downloadButton).toBeVisible({ timeout: 5000 });
   96 |     
   97 |         const [download] = await Promise.all([
   98 |             this.page.waitForEvent('download'),
   99 |             downloadButton.click()
  100 |         ]);
  101 |     
  102 |         expect(download.suggestedFilename()).toContain(`data.${fileExtension}`);
  103 |         console.log(`✅ ${format.toUpperCase()}-Daten exportiert`);
  104 |     }
  105 |     
  106 | }
  107 |
```