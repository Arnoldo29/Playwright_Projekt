# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Ungültige Daten für CoffeeShop-Webseite verwenden
- Location: /workspaces/Playwright_Projekt/Testdaten_generator/API_UngültigeDaten.spec.ts:4:5

# Error details

```
Error: browserType.launch: Executable doesn't exist at /home/codespace/.cache/ms-playwright/chromium-1161/chrome-linux/chrome
╔═════════════════════════════════════════════════════════════════════════╗
║ Looks like Playwright Test or Playwright was just installed or updated. ║
║ Please run the following command to download new browsers:              ║
║                                                                         ║
║     npx playwright install                                              ║
║                                                                         ║
║ <3 Playwright Team                                                      ║
╚═════════════════════════════════════════════════════════════════════════╝
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import axios from 'axios';
   3 |
>  4 | test('Ungültige Daten für CoffeeShop-Webseite verwenden', async ({ page }) => {
     |     ^ Error: browserType.launch: Executable doesn't exist at /home/codespace/.cache/ms-playwright/chromium-1161/chrome-linux/chrome
   5 |     const COFFEESHOP_URL = 'http://10.40.226.38/Bootcamp_Bench/index.php';
   6 |     const API_URL = 'http://127.0.0.1:8001/generate/registrierung/5';
   7 |
   8 |     let testData = null;
   9 |
   10 |     try {
   11 |         const response = await axios.get(API_URL);
   12 |         testData = response.data;
   13 |         console.log('✅ Testdaten erfolgreich abgerufen:', testData);
   14 |     } catch (error) {
   15 |         throw new Error('Fehler beim Abrufen der Testdaten von der API: ' + error.message);
   16 |     }
   17 |
   18 |     if (!testData.ungültige_daten || !Array.isArray(testData.ungültige_daten) || testData.ungültige_daten.length === 0) {
   19 |         throw new Error("🚨 Fehler: Keine ungültigen Registrierungsdaten in der API-Antwort gefunden!");
   20 |     }
   21 |
   22 |     const invalidUser = testData.ungültige_daten[Math.floor(Math.random() * testData.ungültige_daten.length)];
   23 |     const username = invalidUser.benutzername;
   24 |     const password = invalidUser.passwort.trim();
   25 |     const passwordRepeat = password;
   26 |
   27 |     console.log("🔹 Verwendete ungültige Testdaten:");
   28 |     console.log(`👤 Benutzername: ${username}`);
   29 |     console.log(`🔑 Passwort: ${password}`);
   30 |     console.log(`🔑 Passwort wiederholen: ${passwordRepeat}`);
   31 |
   32 |     await page.goto(COFFEESHOP_URL);
   33 |     console.log("📌 CoffeeShop-Webseite geladen");
   34 |
   35 |     expect(await page.$('#headlogo')).not.toBeNull();
   36 |     console.log("✅ Logo ist vorhanden");
   37 |
   38 |     const accountButton = page.locator('#accountbar > a');
   39 |     if (!(await accountButton.isVisible())) {
   40 |         throw new Error("🚨 Fehler: Account-Button ist nicht sichtbar!");
   41 |     }
   42 |     await accountButton.click();
   43 |     console.log("✅ Auf Accountbar geklickt");
   44 |     await page.waitForTimeout(2000);
   45 |
   46 |     await expect(page.locator('#loginContainer > h2')).toBeVisible();
   47 |     console.log("✅ Login-Container Überschrift gefunden");
   48 |
   49 |     const registerLink = page.locator('#loginContainer > div > a');
   50 |     if (!(await registerLink.isVisible())) {
   51 |         throw new Error("🚨 Fehler: Registrierungs-Link ist nicht sichtbar!");
   52 |     }
   53 |     await registerLink.click();
   54 |     console.log("✅ Auf Registrierung geklickt");
   55 |
   56 |     await page.waitForSelector('#register-pwrep', { state: 'visible', timeout: 10000 });
   57 |     await page.waitForSelector('#register-pw', { state: 'visible', timeout: 10000 });
   58 |
   59 |     await page.waitForFunction(() => {
   60 |         const pw = document.querySelector('#register-pw') as HTMLInputElement;
   61 |         return pw && !pw.disabled;
   62 |     });
   63 |
   64 |     await page.waitForFunction(() => {
   65 |         const pwrep = document.querySelector('#register-pwrep') as HTMLInputElement;
   66 |         return pwrep && !pwrep.disabled;
   67 |     });
   68 |
   69 |     await page.locator('#register-pw').scrollIntoViewIfNeeded();
   70 |
   71 |     await page.type('#register-username', username, { delay: 100 });
   72 |     await page.type('#register-pw', password, { delay: 100 });
   73 |     await page.type('#register-pwrep', passwordRepeat, { delay: 100 });
   74 |     console.log("✅ Registrierungsformular ausgefüllt");
   75 |
   76 |     // Fehlertext abfragen
   77 |     const usernameMessage = (await page.locator('#usrmsg').textContent())?.trim() || '';
   78 |     const passwordMessage = (await page.locator('#pwmsg').textContent())?.trim() || '';
   79 |     const repwMessage = (await page.locator('#repwmsg').textContent())?.trim() || '';
   80 |
   81 |     // Einzelne Fehlermeldungen prüfen
   82 |     let usernameErrorDetected = false;
   83 |     let passwordErrorDetected = false;
   84 |
   85 |     if (usernameMessage.includes("gültigen Namen eingeben")) {
   86 |         usernameErrorDetected = true;
   87 |         console.log("✅ Fehlermeldung für Benutzername erkannt.");
   88 |     } else {
   89 |         throw new Error("❌ Die Fehlermeldung für Benutzername wird nicht angezeigt!");
   90 |     }
   91 |
   92 |     if (passwordMessage.includes("8-20 Zeichen")) {
   93 |         passwordErrorDetected = true;
   94 |         console.log("✅ Fehlermeldung für Passwort erkannt.");
   95 |     } else {
   96 |         throw new Error("❌ Die Fehlermeldung für den Passwort wird nicht angezeigt!");
   97 |     }
   98 |
   99 |     if (repwMessage.includes("stimmen nicht überein")) {
  100 |         console.log("⚠️ Hinweis: Fehlermeldung für Passwortwiederholung wurde erkannt.");
  101 |     } else {
  102 |         console.log("ℹ️ Keine Fehlermeldung für Passwortwiederholung – wird in diesem Test nicht benötigt.");
  103 |     }
  104 |
```