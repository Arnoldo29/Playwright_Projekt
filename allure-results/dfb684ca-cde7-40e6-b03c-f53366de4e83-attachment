# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: @PlaywrightWithJenkins >> Daten für CoffeeShop-Webseite verwenden
- Location: /workspaces/Playwright_Projekt/Testdaten_generator/API_Testdaten.spec.ts:8:5

# Error details

```
Error: browserType.launch: Executable doesn't exist at /home/codespace/.cache/ms-playwright/chromium-1161/chrome-linux/chrome
╔═════════════════════════════════════════════════════════════════════════╗
║ Looks like Playwright Test or Playwright was just installed or updated. ║
║ Please run the following command to download new browsers:              ║
║                                                                         ║
║     npx playwright install                                              ║
║                                                                         ║
║ <3 Playwright Team                                                      ║
╚═════════════════════════════════════════════════════════════════════════╝
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import { log } from 'console';
   3 | import { promises as fs } from 'fs';
   4 | import path from 'path';
   5 | import axios from 'axios'; // Fügen Sie Axios hinzu, um mit der API zu kommunizieren
   6 |
   7 | test.describe('@PlaywrightWithJenkins', () => {
>  8 | test('Daten für CoffeeShop-Webseite verwenden', async ({ page }) => {
     |     ^ Error: browserType.launch: Executable doesn't exist at /home/codespace/.cache/ms-playwright/chromium-1161/chrome-linux/chrome
   9 |     const COFFEESHOP_URL = process.env.COFFEESHOP_URL || 'http://10.40.226.38/Bootcamp_Bench/index.php';
   10 |
   11 |     // API URL
   12 |     const API_URL = process.env.API_URL || 'http://127.0.0.1:8001/generate/registrierung/1'; // Beispiel für 1 registrierung Datensatz
   13 |     let testData = null;
   14 |
   15 |     try {
   16 |         // Lade Testdaten von der API
   17 |         const response = await axios.get(API_URL);
   18 |         testData = response.data;
   19 |         console.log('Testdaten erfolgreich abgerufen:', testData);
   20 |     } catch (error) {
   21 |         throw new Error('Fehler beim Abrufen der Testdaten von der API: ' + error.message);
   22 |     }
   23 |
   24 |     // Prüfen, ob Registrierungsdaten in der API-Antwort vorhanden sind
   25 |     if (
   26 |         !testData.gültige_daten ||
   27 |         !Array.isArray(testData.gültige_daten) ||
   28 |         testData.gültige_daten.length === 0
   29 |     ) {
   30 |         throw new Error("🚨 Fehler: Keine gültigen Registrierungsdaten in der API-Antwort gefunden!");
   31 |     }
   32 |
   33 |     let validUser = null;
   34 |     const validUsers = testData.gültige_daten;
   35 |     
   36 |     // Wiederhole, bis gültige Testdaten gefunden werden
   37 |     while (validUsers.length > 0) {
   38 |         const randomIndex = Math.floor(Math.random() * validUsers.length);
   39 |         const randomUser = validUsers[randomIndex];
   40 |
   41 |         // Prüfen, ob Benutzername und Passwort vorhanden sind
   42 |         if (!randomUser.benutzername || !randomUser.passwort) {
   43 |             validUsers.splice(randomIndex, 1); // Ungültige Daten entfernen
   44 |             continue;
   45 |         }
   46 |
   47 |         const username = randomUser.benutzername;
   48 |         const password = randomUser.passwort.trim();
   49 |         const passwordRepeat = password; // Passwort-Wiederholung
   50 |
   51 |         console.log("🔹 Verwendete Testdaten:");
   52 |         console.log(`👤 Benutzername: ${username}`);
   53 |         console.log(`🔑 Passwort: ${password}`);
   54 |         console.log(`🔑 Passwort_wiederholen: ${passwordRepeat}`);
   55 |
   56 |         // CoffeeShop-Webseite aufrufen
   57 |         await page.goto(COFFEESHOP_URL);
   58 |         console.log("📌 CoffeeShop-Webseite geladen");
   59 |
   60 |         // Prüfen, ob das Logo vorhanden ist
   61 |         expect(await page.$('#headlogo')).not.toBeNull();
   62 |         console.log("✅ Logo ist vorhanden");
   63 |
   64 |         // Überprüfen, ob der Account-Button vorhanden ist, bevor darauf geklickt wird
   65 |         const accountButton = page.locator('#accountbar > a');
   66 |         const accountButtonVisible = await accountButton.isVisible();
   67 |         if (!accountButtonVisible) {
   68 |             throw new Error("🚨 Fehler: Account-Button ist nicht sichtbar!");
   69 |         }
   70 |         // Auf den Account-Button klicken
   71 |         await accountButton.click();
   72 |         console.log("✅ Auf Accountbar geklickt");
   73 |         await page.waitForTimeout(2000);
   74 |
   75 |         // Prüfen, ob die Login-Überschrift existiert
   76 |         await expect(page.locator('#loginContainer > h2')).toBeVisible();
   77 |         console.log("✅ Login-Container Überschrift gefunden");
   78 |
   79 |         // Überprüfen, ob der Registrierungs-Link vorhanden ist, bevor darauf geklickt wird
   80 |         const registerLink = page.locator('#loginContainer > div > a');
   81 |         const registerLinkVisible = await registerLink.isVisible();
   82 |         if (!registerLinkVisible) {
   83 |             throw new Error("🚨 Fehler: Registrierungs-Link ist nicht sichtbar!");
   84 |         }
   85 |         // Auf den Registrierungs-Link klicken
   86 |         await registerLink.click();
   87 |         console.log("✅ Auf Registrierung geklickt");
   88 |
   89 |         // Warten, bis das Passwort-Wiederholungsfeld sichtbar ist
   90 |         await page.waitForSelector('#register-pwrep', { state: 'visible', timeout: 10000 });
   91 |
   92 |         // Warten, bis das Passwortfeld sichtbar und interaktiv ist
   93 |         await page.waitForSelector('#register-pw', { state: 'visible', timeout: 10000 });
   94 |         if (!(await page.locator('#register-pw').isEnabled())) {
   95 |             throw new Error("🚨 Fehler: Passwortfeld ist nicht aktiviert.");
   96 |         }
   97 |
   98 |         // Prüfen, ob das Feld nicht disabled ist
   99 |         await page.waitForFunction(() => {
  100 |             const input = document.querySelector('#register-pw') as HTMLInputElement;
  101 |             return input && !input.disabled;
  102 |         });
  103 |
  104 |         // Prüfen, ob das Feld nicht disabled ist
  105 |         await page.waitForFunction(() => {
  106 |             const input = document.querySelector('#register-pwrep') as HTMLInputElement;
  107 |             return input && !input.disabled;
  108 |         });
```