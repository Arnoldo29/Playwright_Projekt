# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Daten f√ºr CoffeeShop generieren und exportieren
- Location: C:\Users\azebaze\Playwright-Kurs\testdaten_generator\DatenGenerieren.spec.ts:5:5

# Error details

```
Error: locator.click: Error: strict mode violation: getByRole('button', { name: /Daten generieren/i }) resolved to 2 elements:
    1) <button aria-label="" kind="secondary" data-testid="stBaseButton-secondary" class="st-emotion-cache-ocsh0s e1d5ycv52">‚Ä¶</button> aka getByRole('button', { name: 'üõ†Ô∏è G√ºltige Daten generieren' })
    2) <button aria-label="" kind="secondary" data-testid="stBaseButton-secondary" class="st-emotion-cache-ocsh0s e1d5ycv52">‚Ä¶</button> aka getByRole('button', { name: '‚ùå Ung√ºltige Daten generieren' })

Call log:
  - waiting for getByRole('button', { name: /Daten generieren/i })

    at ExportPage.generateData (C:\Users\azebaze\Playwright-Kurs\Pages\API_Test.page.ts:45:35)
    at C:\Users\azebaze\Playwright-Kurs\testdaten_generator\DatenGenerieren.spec.ts:19:26
```

# Page snapshot

```yaml
- banner:
  - button "Deploy"
  - button
- heading "Testdaten-Generator" [level=1]
- text: registrierung
- combobox "Selected registrierung. Datentyp w√§hlen"
- img "open"
- spinbutton "Anzahl der Datens√§tze": "5"
- button
- button
- text: Press Enter to apply
- button "üõ†Ô∏è G√ºltige Daten generieren":
  - paragraph: üõ†Ô∏è G√ºltige Daten generieren
- button "‚ùå Ung√ºltige Daten generieren":
  - paragraph: ‚ùå Ung√ºltige Daten generieren
- heading "üì§ Daten exportieren" [level=3]
- text: json
- combobox "Selected json. Exportformat"
- img "open"
- button "üíæ Exportieren":
  - paragraph: üíæ Exportieren
- paragraph:
  - text: API gestartet auf
  - link "http://localhost:8001"
```

# Test source

```ts
   1 | import { Page, expect } from '@playwright/test';
   2 |
   3 | export class ExportPage {
   4 |     readonly page: Page;
   5 |     readonly dropdown;
   6 |     readonly exportFormat;
   7 |     readonly generateButton;
   8 |     readonly exportButton;
   9 |
  10 |     constructor(page: Page) {
  11 |         this.page = page;
  12 |         this.dropdown = page.getByRole('combobox', { name: /Datentyp w√§hlen/i });
  13 |         this.exportFormat = page.getByRole('combobox', { name: /Exportformat ausw√§hlen/i });
  14 |         this.generateButton = page.getByRole('button', { name: /Daten generieren/i });
  15 |         this.exportButton = page.getByRole('button', { name: /Daten exportieren/i });
  16 |     }
  17 |
  18 |     async goto(url: string) {
  19 |         await this.page.goto(url);
  20 |         console.log("üìå Seite geladen");
  21 |         await this.page.waitForTimeout(2000);
  22 |     }
  23 |
  24 |     async verifyTitle(expectedTitle: string) {
  25 |         await expect(this.page).toHaveTitle(expectedTitle);
  26 |         console.log(`‚úÖ Seitentitel gepr√ºft: ${expectedTitle}`);
  27 |         await this.page.waitForTimeout(2000);
  28 |     }
  29 |
  30 |     async selectDataType(dataType: string) {
  31 |         await this.dropdown.click();
  32 |         await this.page.locator(`text=${dataType}`).first().click();
  33 |         await expect(this.dropdown).toHaveAttribute('aria-label', new RegExp(`Selected ${dataType}`, 'i'));
  34 |         console.log(`‚úÖ '${dataType}' als Datentyp ausgew√§hlt`);
  35 |         await this.page.waitForTimeout(2000);
  36 |     }
  37 |
  38 |     async enterDataCount(count: number) {
  39 |         await this.page.fill('input[type="number"]', count.toString());
  40 |         console.log(`üìå ${count} Datens√§tze eingegeben`);
  41 |         await this.page.waitForTimeout(2000);
  42 |     }
  43 |
  44 |     async generateData() {
> 45 |         await this.generateButton.click();
     |                                   ^ Error: locator.click: Error: strict mode violation: getByRole('button', { name: /Daten generieren/i }) resolved to 2 elements:
  46 |         await expect(this.page.locator(`text=${5} Datens√§tze generiert!`)).toBeVisible({ timeout: 10000 });
  47 |         console.log("‚úÖ Daten erfolgreich generiert");
  48 |         await this.page.waitForTimeout(2000);
  49 |     }
  50 |
  51 |     async exportData(format: string, fileExtension: string) {
  52 |         await this.exportFormat.click();
  53 |         await this.page.locator(`text=${format}`).first().click();
  54 |         await expect(this.exportFormat).toHaveAttribute('aria-label', new RegExp(`Selected ${format}`, 'i'));
  55 |         console.log(`‚úÖ '${format}' als Exportformat ausgew√§hlt`);
  56 |         
  57 |
  58 |         await this.exportButton.click();
  59 |         const [download] = await Promise.all([
  60 |             this.page.waitForEvent('download'),
  61 |             this.page.click(`button:has-text("üì• Download ${format.toUpperCase()}")`)
  62 |         ]);
  63 |
  64 |         expect(download.suggestedFilename()).toContain(`data.${fileExtension}`);
  65 |         console.log(`‚úÖ ${format.toUpperCase()}-Daten exportiert`);
  66 |         //await this.page.waitForTimeout(2000);
  67 |     }
  68 | }
  69 |
```