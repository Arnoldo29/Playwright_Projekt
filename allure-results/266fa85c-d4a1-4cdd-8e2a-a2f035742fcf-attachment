# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Daten für CoffeeShop generieren und exportieren
- Location: C:\Users\azebaze\Playwright-Kurs\testdaten_generator\DatenGenerieren.spec.ts:5:5

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toBeVisible()

Locator: locator('//*[@id="root"]/div[1]/div[1]/div/div/section/div[1]/div/div/div/div[7]/div/div/div/div[2]/svg')
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 5000ms
  - waiting for locator('//*[@id="root"]/div[1]/div[1]/div/div/section/div[1]/div/div/div/div[7]/div/div/div/div[2]/svg')

    at ExportPage.exportData (C:\Users\azebaze\Playwright-Kurs\Pages\API_Test.page.ts:66:48)
    at C:\Users\azebaze\Playwright-Kurs\testdaten_generator\DatenGenerieren.spec.ts:32:26
```

# Page snapshot

```yaml
- banner:
  - button "Deploy"
  - button
- heading "Testdaten-Generator" [level=1]
- text: profil
- combobox "Selected profil. Datentyp wählen"
- img "open"
- spinbutton "Anzahl der Datensätze": "5"
- button
- button
- button "🛠️ Gültige Daten generieren":
  - paragraph: 🛠️ Gültige Daten generieren
- alert:
  - paragraph: 5 gültige Datensätze generiert!
- button "Download as CSV"
- button "Search"
- button "Fullscreen"
- button "❌ Ungültige Daten generieren":
  - paragraph: ❌ Ungültige Daten generieren
- heading "📤 Daten exportieren" [level=3]
- text: json
- combobox "Selected json. Exportformat"
- img "open"
- button "💾 Exportieren":
  - paragraph: 💾 Exportieren
- paragraph:
  - text: API gestartet auf
  - link "http://localhost:8001"
```

# Test source

```ts
   1 | import { Page, expect } from '@playwright/test';
   2 |
   3 | export class ExportPage {
   4 |     readonly page: Page;
   5 |     readonly dropdown;
   6 |     readonly exportFormat;
   7 |     readonly generateButton;
   8 |     readonly exportButton;
   9 |
  10 |     constructor(page: Page) {
  11 |         this.page = page;
  12 |         this.dropdown = page.getByRole('combobox', { name: /Datentyp wählen/i });
  13 |         this.exportFormat = page.getByRole('combobox', { name: /Exportformat auswählen/i });
  14 |         this.generateButton = page.getByRole('button', { name: /Daten generieren/i });
  15 |         this.exportButton = page.getByRole('button', { name: /Daten exportieren/i });
  16 |     }
  17 |
  18 |     async goto(url: string) {
  19 |         await this.page.goto(url);
  20 |         console.log("📌 Seite geladen");
  21 |         await this.page.waitForTimeout(2000);
  22 |     }
  23 |
  24 |     async verifyTitle(expectedTitle: string) {
  25 |         await expect(this.page).toHaveTitle(expectedTitle);
  26 |         console.log(`✅ Seitentitel geprüft: ${expectedTitle}`);
  27 |         await this.page.waitForTimeout(2000);
  28 |     }
  29 |
  30 |     async selectDataType(dataType: string) {
  31 |         await this.dropdown.click();
  32 |         await this.page.locator(`text=${dataType}`).first().click();
  33 |         await expect(this.dropdown).toHaveAttribute('aria-label', new RegExp(`Selected ${dataType}`, 'i'));
  34 |         console.log(`✅ '${dataType}' als Datentyp ausgewählt`);
  35 |         await this.page.waitForTimeout(2000);
  36 |     }
  37 |
  38 |     async enterDataCount(count: number) {
  39 |         await this.page.fill('input[type="number"]', count.toString());
  40 |         console.log(`📌 ${count} Datensätze eingegeben`);
  41 |         await this.page.waitForTimeout(2000);
  42 |     }
  43 |
  44 |     async generateData() {
  45 |         const generateBtnSelector = '#root > div:nth-child(1) > div.withScreencast > div > div > section > div.stMainBlockContainer.block-container.st-emotion-cache-mtjnbi.eht7o1d4 > div > div > div > div:nth-child(4) > div > button > div > p';
  46 |         const confirmationSelector = '#root > div:nth-child(1) > div.withScreencast > div > div > section > div.stMainBlockContainer.block-container.st-emotion-cache-mtjnbi.eht7o1d4 > div > div > div > div:nth-child(5) > div > div > div > div > div > div > p';
  47 |
  48 |         const button = this.page.locator(generateBtnSelector);
  49 |         await expect(button).toBeVisible({ timeout: 5000 });
  50 |         await button.click();
  51 |
  52 |         const confirmationText = this.page.locator(confirmationSelector);
  53 |         await expect(confirmationText).toBeVisible({ timeout: 15000 });
  54 |
  55 |         console.log("✅ Daten erfolgreich generiert");
  56 |         await this.page.waitForTimeout(2000);
  57 |     }
  58 |
  59 |     async exportData(format: string, fileExtension: string) {
  60 |         
  61 |     
  62 |         // Schritt 2: Klicke auf das SVG der Combobox (Dropdown öffnen)
  63 |         const exportFormatDropdownIcon = this.page.locator(
  64 |             'xpath=//*[@id="root"]/div[1]/div[1]/div/div/section/div[1]/div/div/div/div[7]/div/div/div/div[2]/svg'
  65 |         );
> 66 |         await expect(exportFormatDropdownIcon).toBeVisible({ timeout: 5000 });
     |                                                ^ Error: Timed out 5000ms waiting for expect(locator).toBeVisible()
  67 |         await exportFormatDropdownIcon.click();
  68 |         console.log(`📌 Dropdown für Exportformat geöffnet`);
  69 |     
  70 |         // Schritt 3: Wähle das gewünschte Format aus der Liste
  71 |         const formatOption = this.page.locator(`text=${format}`);
  72 |         await expect(formatOption).toBeVisible({ timeout: 5000 });
  73 |         await formatOption.click();
  74 |         console.log(`✅ '${format}' als Exportformat ausgewählt`);
  75 |     
  76 |         // Schritt 4: Download-Button (z. B. "📥 Download JSON") klicken
  77 |         const downloadButton = this.page.locator(`button:has-text("📥 Download ${format.toUpperCase()}")`);
  78 |         await expect(downloadButton).toBeVisible({ timeout: 5000 });
  79 |     
  80 |         const [download] = await Promise.all([
  81 |             this.page.waitForEvent('download'),
  82 |             downloadButton.click()
  83 |         ]);
  84 |     
  85 |         expect(download.suggestedFilename()).toContain(`data.${fileExtension}`);
  86 |         console.log(`✅ ${format.toUpperCase()}-Daten exportiert`);
  87 |     }
  88 |     
  89 | }
  90 |
```