# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Daten für CoffeeShop-Webseite verwenden
- Location: C:\Users\azebaze\Playwright-Kurs\testdaten_generator\APIDataCoffeeShop.spec.ts:6:5

# Error details

```
Error: page.type: Test timeout of 30000ms exceeded.
Call log:
  - waiting for locator('#register-username')
    - locator resolved to <input type="text" name="username" class="form input" autocomplete="off" required="required" placeholder="Username" id="register-username" pattern="^[A-Za-z\d\u00d6\u00f6\u00c4\u00e4\u00dc\u00fc]{4,12}$"/>
  - elementHandle.type("gustawluszczyk")

    at C:\Users\azebaze\Playwright-Kurs\testdaten_generator\APIDataCoffeeShop.spec.ts:85:20
```

# Page snapshot

```yaml
- banner:
  - link:
    - img
  - link "0":
    - img
    - text: "0"
  - link "Login"
  - navigation:
    - link "Home"
    - link "About"
    - link "Shop"
    - link "Contact"
- heading "Nutzerkonto anlegen" [level=2]
- textbox "Username": gustawluszczy
- text: Dieser Name ist verfügbar
- textbox "Passwort"
- textbox "Passwort wiederholen"
- checkbox "Ja, ich habe die AGB gelesen und akzeptiere diese."
- text: Ja, ich habe die
- link "AGB"
- text: gelesen und akzeptiere diese.
- button "Registrieren"
- contentinfo:
  - text: ˄
  - link "AGB"
  - paragraph: Finetest Coffee c/o Coffeeshop Inc.
  - paragraph: Teststraße 123
  - paragraph: 12345 Testingen
  - paragraph:
    - link "finetest@coffee.inc"
  - paragraph: Version_2.0.1 / Alle Features ohne Fehler
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import { log } from 'console';
   3 | import { promises as fs } from 'fs';
   4 | import path from 'path';
   5 |
   6 | test('Daten für CoffeeShop-Webseite verwenden', async ({ page }) => {
   7 |     const COFFEESHOP_URL = 'http://10.40.226.38/Bootcamp_Bench/index.php';
   8 |
   9 |     // Lade Testdaten aus der Datei
   10 |     const testDataPath = path.resolve(__dirname, '../test-data/coffeeshop_testdata.json');
   11 |     const rawData = await fs.readFile(testDataPath, 'utf-8');
   12 |     const testData = JSON.parse(rawData);
   13 |
   14 |     // Prüfen, ob Registrierungsdaten in der JSON-Datei vorhanden sind
   15 |     if (!Array.isArray(testData.registrierung) || testData.registrierung.length === 0) {
   16 |         throw new Error("🚨 Fehler: Keine gültigen Registrierungsdaten in der JSON-Datei gefunden!");
   17 |     }
   18 |
   19 |     let validUser = null;
   20 |     
   21 |     // Wiederhole, bis gültige Testdaten gefunden werden
   22 |     while (testData.registrierung.length > 0) {
   23 |         // Zufällige Testdaten auswählen
   24 |         const randomIndex = Math.floor(Math.random() * testData.registrierung.length);
   25 |         const randomUser = testData.registrierung[randomIndex];
   26 |
   27 |         // Prüfen, ob Benutzername und Passwort vorhanden sind
   28 |         if (!randomUser.benutzername || !randomUser.passwort) {
   29 |             testData.registrierung.splice(randomIndex, 1); // Ungültige Daten entfernen
   30 |             continue;
   31 |         }
   32 |
   33 |         const username = randomUser.benutzername;
   34 |         const password = randomUser.passwort.trim();
   35 |         const passwordRepeat = password; // Passwort-Wiederholung
   36 |
   37 |         console.log("🔹 Verwendete Testdaten:");
   38 |         console.log(`👤 Benutzername: ${username}`);
   39 |         console.log(`🔑 Passwort: ${password}`);
   40 |         console.log(`🔑 Passwort_widerholen: ${passwordRepeat}`)
   41 |     
   42 |       
   43 |
   44 |         // CoffeeShop-Webseite aufrufen
   45 |         await page.goto(COFFEESHOP_URL);
   46 |         console.log("📌 CoffeeShop-Webseite geladen");
   47 |
   48 |         // Prüfen, ob das Logo vorhanden ist
   49 |         expect(await page.$('#headlogo')).not.toBeNull();
   50 |         console.log("✅ Logo ist vorhanden");
   51 |
   52 |         // Auf den Account-Button klicken
   53 |         await page.click('#accountbar > a');
   54 |         console.log("✅ Auf Accountbar geklickt");
   55 |         await page.waitForTimeout(2000);
   56 |
   57 |         // Prüfen, ob die Login-Überschrift existiert
   58 |         await expect(page.locator('#loginContainer > h2')).toBeVisible();
   59 |         console.log("✅ Login-Container Überschrift gefunden");
   60 |
   61 |         // Auf den Registrierungs-Link klicken
   62 |         await page.click('#loginContainer > div > a');
   63 |         console.log("✅ Auf Registrierung geklickt");
   64 |
   65 |         // Warten, bis das Passwort-Wiederholungsfeld sichtbar ist
   66 |         await page.waitForSelector('#register-pwrep', { state: 'visible', timeout: 5000 });
   67 |
   68 |         // Warten, bis das Passwortfeld sichtbar und interaktiv ist
   69 |         await page.waitForSelector('#register-pw', { state: 'visible', timeout: 10000 });
   70 |         await page.waitForSelector('#register-pw', { state: 'visible', timeout: 10000 });
   71 |         if (!(await page.locator('#register-pw').isEnabled())) {
   72 |             throw new Error("🚨 Fehler: Passwortfeld ist nicht aktiviert.");
   73 |         }
   74 |
   75 |        // Debugging: Überprüfen Sie den Zustand des Passwortfelds
   76 |         const isVisible = await page.locator('#register-pw').isVisible();
   77 |         const isEnabled = await page.locator('#register-pw').isEnabled();
   78 |         console.log(`🔍 Passwortfeld sichtbar: ${isVisible}`);
   79 |         console.log(`🔍 Passwortfeld aktiviert: ${isEnabled}`);
   80 |
   81 |       // Scrollen Sie zum Passwortfeld
   82 |         await page.locator('#register-pw').scrollIntoViewIfNeeded();
   83 |
   84 |         // Registrierungsformular ausfüllen
>  85 |         await page.type('#register-username', username, { delay: 100 });
      |                    ^ Error: page.type: Test timeout of 30000ms exceeded.
   86 |         await page.type('#register-pw', password, { delay: 100 });
   87 |         await page.type('#register-pwrep', passwordRepeat, { delay: 100 });
   88 |         console.log("✅ Registrierungsformular ausgefüllt");
   89 |
   90 |         
   91 |
   92 |
   93 |         // Prüfen, ob die eingegebenen Daten gültig sind
   94 |         const usernameMessage = await page.locator('#usrmsg').textContent();
   95 |         const userError = await page.locator('#repwmsg').textContent();
   96 |         const passwordError = await page.locator('#pwmsg').textContent();
   97 |
   98 |         if (
   99 |             usernameMessage?.includes("Dieser Name ist verfügbar") &&
  100 |             (!userError || !userError.includes("Die Passwörter stimmen nicht überein")) &&
  101 |            (!passwordError || !passwordError.includes("8-20 Zeichen: a-z, A-Z, 0-9, @$!%*?"))
  102 |         ) {
  103 |            console.log("✅ Gültige Testdaten gefunden, Registrierung wird fortgesetzt.");
  104 |            validUser = randomUser;
  105 |            break;
  106 |         } else {
  107 |             console.log(`⚠️ Ungültige Daten: ${usernameMessage || ''} ${userError || ''} ${passwordError || ''}`);
  108 |             testData.registrierung.splice(randomIndex, 1); // Entferne ungültige Daten
  109 |             continue;
  110 |         }
  111 |      
  112 |             
  113 |         
  114 |
  115 |         //validUser = randomUser;
  116 |         //break; // Falls gültige Daten gefunden wurden, die Schleife beenden
  117 |     }
  118 |
  119 |     if (!validUser) {
  120 |         throw new Error("❌ Keine gültigen Testdaten gefunden.");
  121 |       
  122 |     }
  123 |
  124 |     // AGB-Checkbox aktivieren
  125 |     await page.check('#register-check');
  126 |     console.log("✅ AGB akzeptiert");
  127 |
  128 |     // Registrierung abschicken
  129 |     await page.click('body > content > div:nth-child(2) > div > form > div.reg.btn > input');
  130 |     console.log("✅ Registrierung abgeschickt");
  131 |
  132 |     // Prüfen, ob die Erfolgsmeldung angezeigt wird
  133 | const successMessage = await page.locator('#overlaysubmit > h2').filter({ hasText: "Deine Registrierung war erfolgreich!" });
  134 | const confirmButton = page.locator('#overlaysubmit > button').filter({ hasText: "OK" });
  135 |
  136 | if (await successMessage.isVisible()) {
  137 |     console.log("✅ Erfolgsmeldung erhalten: 'Deine Registrierung war erfolgreich!'");
  138 |     
  139 |     // Warten, bis der OK-Button sichtbar ist und dann klicken
  140 |     await confirmButton.isVisible();
  141 |     await confirmButton.click();
  142 |     
  143 |     console.log("✅ OK-Button geklickt");
  144 | } else {
  145 |     console.log(`⚠️ Keine gültige Erfolgsmeldung gefunden. Erhalten: '${successMessage || "Keine Nachricht"}'`);
  146 | }
  147 |
  148 |
  149 |     // Aktualisierte Testdaten speichern, um doppelte Nutzung zu vermeiden
  150 |     await fs.writeFile(testDataPath, JSON.stringify(testData, null, 2), 'utf-8');
  151 |     console.log("✅ Testdaten aktualisiert.");
  152 |
  153 |     // Zur Hauptseite zurückkehren
  154 |     await page.goto(COFFEESHOP_URL);
  155 |     console.log("📌 Zurück zur Hauptseite");
  156 |
  157 |     // Erneut auf Login klicken
  158 |     await page.click('#accountbar > a');
  159 |     console.log("✅ Auf Login geklickt");
  160 |
  161 |     // Login-Felder ausfüllen
  162 |     await page.type('#login-username', validUser.benutzername, { delay: 200 });
  163 |     await page.type('#login-password', validUser.passwort, { delay: 200 });
  164 |     console.log("✅ Login-Formular ausgefüllt");
  165 |
  166 |     // Login absenden
  167 |     await page.click('#login-submit');
  168 |     console.log("✅ Login abgeschickt");
  169 |
  170 |     // Überprüfen, ob der Login erfolgreich war (Logout-Button sichtbar)
  171 |     //await expect(page.locator('#logout-button')).toBeVisible();
  172 |     //console.log("🎉 Erfolgreich eingeloggt!");
  173 | });
  174 |
```